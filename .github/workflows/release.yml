name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Trigger when pushing tags starting with v (e.g. v1.4.1)
  workflow_dispatch:  # Allow manual trigger

# Add necessary permissions
permissions:
  contents: write  # Allow creating releases and uploading files
  actions: read    # Allow reading actions
  checks: write    # Allow writing check results

jobs:
  build-and-release:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # Use stable Python version
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=5.0.0
        
    - name: Verify project structure
      run: |
        echo "=== Project Structure Check ==="
        Get-ChildItem -Force
        echo "=== src directory ==="
        Get-ChildItem src/ -Force
        echo "=== assets directory ==="
        if (Test-Path "src/assets") { Get-ChildItem src/assets/ -Force } else { echo "assets directory not found" }

    - name: Run CI tests
      run: |
        echo "=== Running CI Safety Tests ==="
        python scripts/ci_tests.py

    - name: Build executable
      run: |
        echo "=== Starting Build ==="
        python scripts/build.py
        
    - name: Verify build output
      run: |
        echo "=== Build Results Check ==="
        Get-ChildItem dist/ -Force
        if (Test-Path "dist/BadgePatternTool.exe") {
          $size = (Get-Item "dist/BadgePatternTool.exe").Length / 1MB
          echo "Executable file size: $([math]::Round($size, 1)) MB"
        } else {
          echo "Executable file not found"
          exit 1
        }
        
    - name: Extract version info
      id: version
      run: |
        $version = "${{ github.ref_name }}"
        $versionNumber = $version -replace '^v', ''
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "VERSION_NUMBER=$versionNumber" >> $env:GITHUB_ENV
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "version_number=$versionNumber" >> $env:GITHUB_OUTPUT

    - name: Create release files
      run: |
        echo "=== Preparing Release Files ==="
        # Create release directory
        mkdir release

        # Copy main files to release directory
        Copy-Item "dist/BadgePatternTool.exe" "release/"
        Copy-Item "dist/使用说明.md" "release/" -ErrorAction SilentlyContinue

        # Use version from environment variable
        $version = "${{ env.VERSION }}"
        $zipName = "BadgePatternTool-$version-Windows.zip"
        $exeName = "BadgePatternTool-$version.exe"

        # Create ZIP file (containing all files)
        Compress-Archive -Path "release/*" -DestinationPath $zipName

        # Copy standalone exe file (renamed for distinction)
        Copy-Item "dist/BadgePatternTool.exe" $exeName

        echo "=== Release Files List ==="
        echo "ZIP contents:"
        Get-ChildItem release/ -Force
        echo "Release files:"
        Get-ChildItem *.zip, *.exe -Force

        # Verify files exist
        if (Test-Path $zipName) {
          echo "ZIP file created successfully: $zipName"
        } else {
          echo "ZIP file creation failed"
          exit 1
        }

        if (Test-Path $exeName) {
          echo "EXE file created successfully: $exeName"
        } else {
          echo "EXE file creation failed"
          exit 1
        }

        # Set environment variables for subsequent steps
        echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
        echo "EXE_NAME=$exeName" >> $env:GITHUB_ENV
        
    - name: Generate release notes
      id: release_notes
      run: |
        echo "=== Generating Release Notes ==="
        $version = "${{ env.VERSION }}"

        # Generate release notes using script (skip changelog to avoid encoding issues)
        python scripts/generate_release_notes.py $version release_notes.md --skip-changelog

        # Read generated content
        $releaseNotes = Get-Content "release_notes.md" -Raw -Encoding UTF8

        # Set output for GitHub Release
        echo "RELEASE_NOTES<<EOF" >> $env:GITHUB_ENV
        echo $releaseNotes >> $env:GITHUB_ENV
        echo "EOF" >> $env:GITHUB_ENV

        echo "Release notes generated successfully"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: BadgePatternTool ${{ env.VERSION }}
        body: ${{ env.RELEASE_NOTES }}
        files: |
          ${{ env.ZIP_NAME }}
          ${{ env.EXE_NAME }}
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BadgePatternTool-${{ env.VERSION }}-artifacts
        path: |
          dist/
          release/
          *.zip
          *.exe
        retention-days: 30
