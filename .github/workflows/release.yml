name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 当推送以v开头的标签时触发（如v1.4.1）
  workflow_dispatch:  # 允许手动触发

# 添加必要的权限
permissions:
  contents: write  # 允许创建release和上传文件
  actions: read    # 允许读取actions
  checks: write    # 允许写入检查结果

jobs:
  build-and-release:
    runs-on: windows-latest

    env:
      PYTHONIOENCODING: utf-8
      PYTHONUTF8: 1

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'  # 使用稳定的Python版本

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller>=5.0.0

    - name: Install UPX for compression
      run: |
        # 使用Chocolatey安装UPX (更简单可靠)
        choco install upx -y
        upx --version
        
    - name: 验证项目结构
      run: |
        echo "=== 项目结构检查 ==="
        Get-ChildItem -Force
        echo "=== src目录 ==="
        Get-ChildItem src/ -Force
        echo "=== assets目录 ==="
        if (Test-Path "src/assets") { Get-ChildItem src/assets/ -Force } else { echo "assets目录不存在" }

    - name: 运行CI测试
      run: |
        echo "=== 运行CI安全测试 ==="
        python scripts/ci_tests.py

    - name: 构建可执行文件
      run: |
        echo "=== 开始构建 ==="
        python scripts/build.py
        
    - name: 验证构建结果
      run: |
        echo "=== 构建结果检查 ==="
        Get-ChildItem dist/ -Force
        if (Test-Path "dist/BadgePatternTool.exe") {
          $size = (Get-Item "dist/BadgePatternTool.exe").Length / 1MB
          echo "✅ 可执行文件大小: $([math]::Round($size, 1)) MB"
        } else {
          echo "❌ 可执行文件未找到"
          exit 1
        }
        
    - name: Extract version info
      id: version
      run: |
        $version = "${{ github.ref_name }}"
        $versionNumber = $version -replace '^v', ''
        echo "VERSION=$version" >> $env:GITHUB_ENV
        echo "VERSION_NUMBER=$versionNumber" >> $env:GITHUB_ENV
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "version_number=$versionNumber" >> $env:GITHUB_OUTPUT

    - name: 创建发布文件
      run: |
        echo "=== 准备发布文件 ==="
        # 创建发布目录
        mkdir release

        # 复制主要文件到发布目录
        Copy-Item "dist/BadgePatternTool.exe" "release/"
        Copy-Item "dist/CHANGELOG.md" "release/" -ErrorAction SilentlyContinue

        # 使用环境变量中的版本号
        $version = "${{ env.VERSION }}"
        $zipName = "BadgePatternTool-$version-Windows.zip"
        $exeName = "BadgePatternTool-$version.exe"

        # 创建ZIP文件（包含所有文件）
        Compress-Archive -Path "release/*" -DestinationPath $zipName

        # 复制单独的exe文件（重命名以区分）
        Copy-Item "dist/BadgePatternTool.exe" $exeName

        echo "=== Release Files List ==="
        echo "ZIP contents:"
        Get-ChildItem release/ -Force
        echo "Release files:"
        Get-ChildItem *.zip, *.exe -Force

        # Verify files exist
        if (Test-Path $zipName) {
          echo "ZIP file created successfully: $zipName"
        } else {
          echo "ZIP file creation failed"
          exit 1
        }

        if (Test-Path $exeName) {
          echo "EXE file created successfully: $exeName"
        } else {
          echo "EXE file creation failed"
          exit 1
        }

        # Set environment variables for subsequent steps
        echo "ZIP_NAME=$zipName" >> $env:GITHUB_ENV
        echo "EXE_NAME=$exeName" >> $env:GITHUB_ENV
        
    - name: Create simple release notes
      id: release_notes
      run: |
        echo "=== Creating Release Notes ==="
        $version = "${{ env.VERSION }}"

        # Create simple release notes
        $releaseNotes = @"
        # 徽章图案工具 BadgePatternTool $version

        ## 下载选项

        - **独立版本**: ``BadgePatternTool-$version.exe`` (直接运行)
        - **完整包**: ``BadgePatternTool-$version-Windows.zip`` (包含更新日志)

        **系统要求**: Windows 7/8/10/11 (64位)

        ## 更新日志

        详细的更新信息请查看下载包中的 CHANGELOG.md 文件。

        ## 问题反馈

        如果您遇到任何问题，请在 [Issues](https://github.com/fenglyu1314/BadgePatternTool/issues) 中反馈。
        "@

        # Set output for GitHub Release
        echo "RELEASE_NOTES<<EOF" >> $env:GITHUB_ENV
        echo $releaseNotes >> $env:GITHUB_ENV
        echo "EOF" >> $env:GITHUB_ENV

        echo "Simple release notes created"
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: BadgePatternTool ${{ env.VERSION }}
        body: ${{ env.RELEASE_NOTES }}
        files: |
          ${{ env.ZIP_NAME }}
          ${{ env.EXE_NAME }}
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: BadgePatternTool-${{ env.VERSION }}-artifacts
        path: |
          dist/
          release/
          *.zip
          *.exe
        retention-days: 30
